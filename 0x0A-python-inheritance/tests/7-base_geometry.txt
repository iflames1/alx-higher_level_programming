====================
BaseGeometry doctest
====================

``BaseGeometry`` desc.
::
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

::
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>>
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] name must be an integer

::
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [ValueError] age must be greater than 0

::
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [ValueError] distance must be greater than 0

::
	>>> try:
	...     bg.integer_validator("weight", 4.56)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] weight must be an integer

::
    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e)) #doctest: +ELLIPSIS
    ...
    [TypeError] BaseGeometry.integer_validator() ... argument: 'value'

::
    >>> try:
    ...     bg.integer_validator("age", (4,))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] age must be an integer

::
    >>> try:
    ...     bg.integer_validator("age", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] age must be an integer

::
    >>> try:
    ...     bg.integer_validator("age", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] age must be an integer

::
    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    ...
    [TypeError] age must be an integer


Test for area() method

::
    >>> Rectangle = __import__('9-rectangle').Rectangle
    >>>
    >>> r = Rectangle(3, 5)
    >>> print(r)
    [Rectangle] 3/5
    >>> print(r.area())
    15
